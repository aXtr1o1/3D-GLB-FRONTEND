// === aXtrLabs minimal black-white variant ===

// Core config
$background: #0b0d11;        // dark background for contrast
$faceColor: #000000;         // all faces black
$borderColor: #ffffff;       // white border around faces
$scale: 1;
$duration: 3s;
$timingFunction: ease;

/* ------------------------------------------------------------------
   DO NOT center the whole page globally. Scope to the loader only.
   ------------------------------------------------------------------ */

/* Fullscreen version wrapper (kept for completeness) */
.axtr-cube-loader-body {
  display: grid;
  place-items: center;
  width: 100vw;
  height: 100vh;
  background: $background;
}

/* Embedded version (inside any container like your 220x220 box) */
.axtr-cube-loader-embed {
  width: 100%;
  height: 100%;
  display: flex;               /* center both the cube AND the label */
  align-items: center;
  justify-content: center;
  flex-direction: column;      /* stack label under cube */
  background: transparent;     /* honor parent bg */
  text-align: center;
}

/* Label styling reused in both modes */
.axtr-cube-label {
  margin-top: 18px;
  font-size: 12px;
  letter-spacing: 0.12em;
  text-transform: uppercase;
  color: rgba(255, 255, 255, 0.6);
}

/* === Loader unit (the isometric 3D logic) === */
.container {
  position: relative;
  height: 100px;
  width: 86px;
  transform: scale(#{$scale * 0.5});
  transform-origin: center center; /* ensure scale is centered */
  margin: 0 auto;                  /* belt-and-suspenders centering */
}

/* === Cube base === */
.cube {
  position: absolute;
  width: 86px;
  height: 100px;
}

/* === Black faces with white borders === */
.right {
  background: $faceColor;
  border: 1px solid $borderColor;
  transform: rotate(-30deg) skewX(-30deg) translate(49px, 65px) scaleY(0.86);
}

.left {
  background: $faceColor;
  border: 1px solid $borderColor;
  transform: rotate(90deg) skewX(-30deg) scaleY(0.86) translate(25px, -50px);
}

.top {
  background: $faceColor;
  border: 1px solid $borderColor;
  transform: rotate(210deg) skew(-30deg) translate(-75px, -22px) scaleY(0.86);
  z-index: 2;
}

/* === Generic face styling === */
.face {
  height: 50px;
  width: 50px;
  position: absolute;
  transform-origin: 0 0;
  background: $faceColor;
  border: 1px solid $borderColor;
}

/* === Animation logic (unchanged) === */
@mixin slice($h, $w, $l) {
  .h#{$h}.w#{$w}.l#{$l} {
    z-index: (-#{$h});
    animation-name: h#{$h}w#{$w}l#{$l};
    animation-timing-function: $timingFunction;
    animation-duration: $duration;
    animation-iteration-count: infinite;
  }

  @keyframes h#{$h}w#{$w}l#{$l} {
    0% {
      transform: translate(
        ($w * -50% - 50%) + ($l * 50% + 50%),
        ($h * 50 - 200%) + ($w * 25% - 25%) + ($l * 25 + 25%)
      );
    }
    14% {
      transform: translate(
        ($w * -50% - 50%) + ($l * 100% - 50%),
        ($h * 50 - 200%) + ($w * 25% - 25%) + ($l * 50 - 25%)
      );
    }
    28% {
      transform: translate(
        ($w * -100% + 50%) + ($l * 100% - 50%),
        ($h * 50 - 200%) + ($w * 50% - 75%) + ($l * 50 - 25%)
      );
    }
    43% {
      transform: translate(
        ($w * -100% - 100%) + ($l * 100% + 100%),
        ($h * 100 - 400%) + ($w * 50% - 50%) + ($l * 50 + 50%)
      );
    }
    57% {
      transform: translate(
        ($w * -100% - 100%) + ($l * 50% + 200%),
        ($h * 100 - 400%) + ($w * 50% - 50%) + ($l * 25 + 100%)
      );
    }
    71% {
      transform: translate(
        ($w * -50% - 200%) + ($l * 50% + 200%),
        ($h * 100 - 375%) + ($w * 25% - 25%) + ($l * 25 + 100%)
      );
    }
    85% {
      transform: translate(
        ($w * -50% - 50%) + ($l * 50% + 50%),
        ($h * 50 - 200%) + ($w * 25% - 25%) + ($l * 25 + 25%)
      );
    }
    100% {
      transform: translate(
        ($w * -50% - 50%) + ($l * 50% + 50%),
        ($h * 50 - 200%) + ($w * 25% - 25%) + ($l * 25 + 25%)
      );
    }
  }
}

/* === Generate all slices dynamically === */
@mixin generateSlice() {
  @for $i from 1 to 4 {
    @for $j from 1 to 4 {
      @for $k from 1 to 4 {
        @include slice($i, $j, $k);
      }
    }
  }
}

@include generateSlice();
